{
  "address": "0x367707f181Dd96EF2FA90188496D10FEDd284dc4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CaseManager__RecipientHasNoRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CaseManager__TransferNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_partyA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_caseId",
          "type": "uint32"
        }
      ],
      "name": "NewCaseOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_hash",
          "type": "uint32"
        }
      ],
      "name": "doesCaseExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_partyB",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_caseName",
          "type": "string"
        }
      ],
      "name": "openCase",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "caseId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenid",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9401eef571fd7b01cfe2985c170168d39e398e5aa9a25ecf25bed34ca1b56b79",
  "receipt": {
    "to": null,
    "from": "0x38C7f216C8e59697959dbC4b4F471b2E0A2C478F",
    "contractAddress": "0x367707f181Dd96EF2FA90188496D10FEDd284dc4",
    "transactionIndex": 41,
    "gasUsed": "3417376",
    "logsBloom": "0x
    "blockHash": "0x55f1251acbbfedabde733e809a04de1d2ca1ffae3cb664824f2700a86a3e59ac",
    "transactionHash": "0x9401eef571fd7b01cfe2985c170168d39e398e5aa9a25ecf25bed34ca1b56b79",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 36867789,
        "transactionHash": "0x9401eef571fd7b01cfe2985c170168d39e398e5aa9a25ecf25bed34ca1b56b79",
        "address": "0x367707f181Dd96EF2FA90188496D10FEDd284dc4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000038c7f216c8e59697959dbc4b4f471b2e0a2c478f"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x55f1251acbbfedabde733e809a04de1d2ca1ffae3cb664824f2700a86a3e59ac"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 36867789,
        "transactionHash": "0x9401eef571fd7b01cfe2985c170168d39e398e5aa9a25ecf25bed34ca1b56b79",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000038c7f216c8e59697959dbc4b4f471b2e0a2c478f",
          "0x0000000000000000000000004923de87853e95751a87eafe957a88a564387dac"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016cea76caead3c0000000000000000000000000000000000000000000000001bf5d7825716d7400000000000000000000000000000000000000000000000004a73286373fa72275000000000000000000000000000000000000000000000001bdf08daea682a040000000000000000000000000000000000000000000000004a89f70ae0a91f635",
        "logIndex": 163,
        "blockHash": "0x55f1251acbbfedabde733e809a04de1d2ca1ffae3cb664824f2700a86a3e59ac"
      }
    ],
    "blockNumber": 36867789,
    "cumulativeGasUsed": "9384485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ekiio.infura-ipfs.io/ipfs/"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b1679e638f5f23ebbc485765f4c430d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CaseManager__RecipientHasNoRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CaseManager__TransferNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_partyA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_caseId\",\"type\":\"uint32\"}],\"name\":\"NewCaseOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_hash\",\"type\":\"uint32\"}],\"name\":\"doesCaseExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partyB\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_caseName\",\"type\":\"string\"}],\"name\":\"openCase\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"caseId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ekiio\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"doesCaseExist(uint32)\":{\"details\":\"Simple getter function for the frontend to check if a user tries      to open a case with the same parameters twice.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"openCase(address,address,string)\":{\"details\":\"Called by frontend to open a new case. Creates a unique case ID         from the address of the parties as well as a short string which         is given to the case, e.g. an official case tracking number or         other unique identifier. The last 9 digits of this hash will         become the unique caseId. Throws an error when case already         exists. Creates internal records and finally calls the method         that will mint the unique access token for the evidence         submission data room.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"setURI(string)\":{\"details\":\"If a new storage address needs to be set, this function will      update the address at which the token images will be stored.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"Sets token metadata. All relevant access data can already be         deducted from the tokenId but for extra clarity and security,         having the metadata on chain might help.\"}},\"title\":\"Case Manager of the Evidence Management System\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"openCase(address,address,string)\":{\"notice\":\"Following convention of naming cases. \\\"A v B\\\" and \\\"B v A\\\" are         to be treated as two separate cases, so parties A and B are         not interchangable.\"},\"uri(uint256)\":{\"notice\":\"Image URL will have a simple icon depicting the role, i.e. have         a document icon for the parties, and a judge's gavel for jurors\"}},\"notice\":\"This contract is the central piece of the evidence management         systems. Users will be able to open a new case, given the         addresses of the dispute party and a case name (which can be         an official tracking number to make it a unique identifier).         Once a case has been created, the dispute parties will be issued         an access NFT with a unique token ID hat allows for access control,         differentiating of roles (party or juror) in the case, and -         ultimately - the encryption and decryption of files uploaded on the         frontend to IPFS, using the functionality provided by Lit Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CaseManager.sol\":\"CaseManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CaseManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nerror CaseManager__CaseAlreadyExists();\\nerror CaseManager__TransferNotAllowed();\\nerror CaseManager__RecipientHasNoRole();\\n\\n/// @title  Case Manager of the Evidence Management System\\n/// @author ekiio\\n/// @notice This contract is the central piece of the evidence management\\n///         systems. Users will be able to open a new case, given the\\n///         addresses of the dispute party and a case name (which can be\\n///         an official tracking number to make it a unique identifier).\\n///         Once a case has been created, the dispute parties will be issued\\n///         an access NFT with a unique token ID hat allows for access control,\\n///         differentiating of roles (party or juror) in the case, and -\\n///         ultimately - the encryption and decryption of files uploaded on the\\n///         frontend to IPFS, using the functionality provided by Lit Protocol.\\ncontract CaseManager is ERC1155, ERC1155URIStorage, Ownable {\\n    // Types\\n\\n    enum Role {\\n        // used to create different access tokens accoring to role\\n        UNASSIGNED,\\n        PARTY,\\n        JUROR\\n    }\\n\\n    // State variables\\n\\n    address private immutable i_owner;\\n\\n    uint256 private s_tokenId;\\n    string private s_baseURI;\\n\\n    mapping(uint32 => bool) private caseExists;\\n    mapping(address => uint256) private hasRole;\\n\\n    // Events\\n\\n    event NewCaseOpened(address _partyA, address _partyB, uint32 _caseId);\\n\\n    // Functions\\n\\n    constructor(string memory _baseURI) ERC1155(_baseURI) {\\n        i_owner = msg.sender;\\n        s_baseURI = _baseURI;\\n    }\\n\\n    /// @dev    Called by frontend to open a new case. Creates a unique case ID\\n    ///         from the address of the parties as well as a short string which\\n    ///         is given to the case, e.g. an official case tracking number or\\n    ///         other unique identifier. The last 9 digits of this hash will\\n    ///         become the unique caseId. Throws an error when case already\\n    ///         exists. Creates internal records and finally calls the method\\n    ///         that will mint the unique access token for the evidence\\n    ///         submission data room.\\n    /// @notice Following convention of naming cases. \\\"A v B\\\" and \\\"B v A\\\" are\\n    ///         to be treated as two separate cases, so parties A and B are\\n    ///         not interchangable.\\n    function openCase(\\n        address _partyA,\\n        address _partyB,\\n        string memory _caseName\\n    ) external returns (uint32 caseId) {\\n        uint256 hashValue = uint256(\\n            keccak256(abi.encodePacked(_partyA, _partyB, _caseName))\\n        ) % 10 ** 9;\\n        caseId = uint32(hashValue);\\n        /*  if (caseExists[caseId]) {\\n            revert CaseManager__CaseAlreadyExists();\\n        } */\\n        require(!caseExists[caseId], \\\"Case already exists!\\\");\\n        caseExists[caseId] = true;\\n        hasRole[_partyA] = uint256(Role.PARTY);\\n        hasRole[_partyB] = uint256(Role.PARTY);\\n        _sendAccessToken(_partyA, caseId);\\n        _sendAccessToken(_partyB, caseId);\\n        emit NewCaseOpened(_partyA, _partyB, caseId);\\n        return caseId;\\n    }\\n\\n    /// @dev Simple getter function for the frontend to check if a user tries\\n    ///      to open a case with the same parameters twice.\\n    function doesCaseExist(uint32 _hash) external view returns (bool) {\\n        return caseExists[_hash];\\n    }\\n\\n    /// @dev Gets the unique tokenId for the corresponding caseId and\\n    ///      respective role of the receiver, and then mints the access token.\\n    function _sendAccessToken(address _to, uint32 _caseId) internal {\\n        uint256 _tokenId = _createTokenId(_caseId, _to);\\n        _mint(_to, _tokenId, 1, \\\"\\\");\\n    }\\n\\n    /// @dev To make the code clearer and support code reuse, this function\\n    ///      creates a unique token ID from the case ID and the receiver's\\n    ///      role. Token IDs ending in \\\"1\\\" are the evidence submitting parties,\\n    ///      those ending in \\\"2\\\" are the NFTs for jurors assigned to this case.\\n    function _createTokenId(\\n        uint32 _caseId,\\n        address _recipient\\n    ) internal view returns (uint256 tokenId) {\\n        if (hasRole[_recipient] == uint256(Role.PARTY)) {\\n            return uint256(_caseId) * 10 + uint256(Role.PARTY);\\n        } else if (hasRole[_recipient] == uint256(Role.JUROR)) {\\n            return uint256(_caseId) * 10 + uint256(Role.JUROR);\\n        } else {\\n            revert CaseManager__RecipientHasNoRole();\\n        }\\n    }\\n\\n    /// @dev If a new storage address needs to be set, this function will\\n    ///      update the address at which the token images will be stored.\\n    function setURI(string memory _newURI) public onlyOwner {\\n        s_baseURI = _newURI;\\n    }\\n\\n    /// @dev    Sets token metadata. All relevant access data can already be\\n    ///         deducted from the tokenId but for extra clarity and security,\\n    ///         having the metadata on chain might help.\\n    /// @notice Image URL will have a simple icon depicting the role, i.e. have\\n    ///         a document icon for the parties, and a judge's gavel for jurors\\n    function uri(\\n        uint256 _tokenid\\n    ) public view override(ERC1155, ERC1155URIStorage) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"Evidence Management Access Token\\\"',\\n                                '\\\"description\\\":\\\"Grants access to the Evidence Management System\\\", ',\\n                                '\\\"properties\\\": {\\\"case_id\\\":\\\"',\\n                                abi.encodePacked(\\n                                    Strings.toString(_tokenid / 10)\\n                                ),\\n                                '\\\", \\\"role\\\":\\\"',\\n                                abi.encodePacked(\\n                                    Strings.toString(_tokenid % 10)\\n                                ),\\n                                '\\\"}, \\\"image\\\":\\\"',\\n                                abi.encodePacked(\\n                                    string.concat(\\n                                        s_baseURI,\\n                                        Strings.toString(_tokenid % 10)\\n                                    )\\n                                ),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    // functions required to make the NFT soulbound, i.e. non-transferrable\\n\\n    function setApprovalForAll(address, bool) public pure override {\\n        revert CaseManager__TransferNotAllowed();\\n    }\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public pure override {\\n        revert CaseManager__TransferNotAllowed();\\n    }\\n\\n    /*ToDo: - Function to randomly select jury members from a panel (using\\n              Chainlink VRF).\\n            - maybe functionality to get a case report, i.e. have a data struct\\n              \\\"Case\\\" that contains the address of the dispute parties, the name\\n              of the case, addresses of selected jurors and timestamp. Mapping \\n              of caseIds to the Case structs.\\n            - making the openNewCase function payable. Using either an update\\n              function or price oracles to be able to set adequate fees.\\n     */\\n}\\n\",\"keccak256\":\"0xa2f10580a23727ed7c6e1339f4173d71bfcfd5aa41dbac0c3b14260296e5ed59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052604051806020016040528060008152506003908162000024919062000435565b503480156200003257600080fd5b50604051620040a2380380620040a2833981810160405281019062000058919062000680565b806200006a81620000d860201b60201c565b506200008b6200007f620000ed60201b60201c565b620000f560201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060079081620000d0919062000435565b5050620006d1565b8060029081620000e9919062000435565b5050565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023d57607f821691505b602082108103620002535762000252620001f5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200027e565b620002c986836200027e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000316620003106200030a84620002e1565b620002eb565b620002e1565b9050919050565b6000819050919050565b6200033283620002f5565b6200034a62000341826200031d565b8484546200028b565b825550505050565b600090565b6200036162000352565b6200036e81848462000327565b505050565b5b8181101562000396576200038a60008262000357565b60018101905062000374565b5050565b601f821115620003e557620003af8162000259565b620003ba846200026e565b81016020851015620003ca578190505b620003e2620003d9856200026e565b83018262000373565b50505b505050565b600082821c905092915050565b60006200040a60001984600802620003ea565b1980831691505092915050565b6000620004258383620003f7565b9150826002028217905092915050565b6200044082620001bb565b67ffffffffffffffff8111156200045c576200045b620001c6565b5b62000468825462000224565b620004758282856200039a565b600060209050601f831160018114620004ad576000841562000498578287015190505b620004a4858262000417565b86555062000514565b601f198416620004bd8662000259565b60005b82811015620004e757848901518255600182019150602085019450602081019050620004c0565b8683101562000507578489015162000503601f891682620003f7565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b62000556826200053a565b810181811067ffffffffffffffff82111715620005785762000577620001c6565b5b80604052505050565b60006200058d6200051c565b90506200059b82826200054b565b919050565b600067ffffffffffffffff821115620005be57620005bd620001c6565b5b620005c9826200053a565b9050602081019050919050565b60005b83811015620005f6578082015181840152602081019050620005d9565b60008484015250505050565b6000620006196200061384620005a0565b62000581565b90508281526020810184848401111562000638576200063762000535565b5b62000645848285620005d6565b509392505050565b600082601f83011262000665576200066462000530565b5b81516200067784826020860162000602565b91505092915050565b60006020828403121562000699576200069862000526565b5b600082015167ffffffffffffffff811115620006ba57620006b96200052b565b5b620006c8848285016200064d565b91505092915050565b6080516139b8620006ea600039600050506139b86000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063715018a61161008c578063d801532611610066578063d80153261461025a578063e985e9c51461028a578063f242432a146102ba578063f2fde38b146102d6576100e9565b8063715018a6146102165780638da5cb5b14610220578063a22cb4651461023e576100e9565b80630e89341c116100c85780630e89341c1461016a5780632eb2c2d61461019a578063419e2e58146101b65780634e1273f4146101e6576100e9565b8062fdd58e146100ee57806301ffc9a71461011e57806302fe53051461014e575b600080fd5b61010860048036038101906101039190611c0a565b6102f2565b6040516101159190611c59565b60405180910390f35b61013860048036038101906101339190611ccc565b6103ba565b6040516101459190611d14565b60405180910390f35b61016860048036038101906101639190611e75565b61049c565b005b610184600480360381019061017f9190611ebe565b6104b7565b6040516101919190611f6a565b60405180910390f35b6101b460048036038101906101af91906120f5565b6105c6565b005b6101d060048036038101906101cb9190612200565b610667565b6040516101dd9190611d14565b60405180910390f35b61020060048036038101906101fb91906122f0565b61069d565b60405161020d9190612426565b60405180910390f35b61021e6107b6565b005b6102286107ca565b6040516102359190612457565b60405180910390f35b6102586004803603810190610253919061249e565b6107f4565b005b610274600480360381019061026f91906124de565b610826565b604051610281919061255c565b60405180910390f35b6102a4600480360381019061029f9190612577565b610a15565b6040516102b19190611d14565b60405180910390f35b6102d460048036038101906102cf91906125b7565b610aa9565b005b6102f060048036038101906102eb919061264e565b610adb565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610362576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610359906126ed565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610495575061049482610b5e565b5b9050919050565b6104a4610bc8565b80600790816104b39190612919565b5050565b60606105a06104d1600a846104cc9190612a49565b610c46565b6040516020016104e19190612ab6565b604051602081830303815290604052610505600a856105009190612acd565b610c46565b6040516020016105159190612ab6565b604051602081830303815290604052600761053b600a876105369190612acd565b610c46565b60405160200161054c929190612b81565b60405160208183030381529060405260405160200161056b9190612ab6565b60405160208183030381529060405260405160200161058c93929190612e26565b604051602081830303815290604052610d14565b6040516020016105b09190612ee5565b6040516020818303038152906040529050919050565b6105ce610e8c565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061061457506106138561060e610e8c565b610a15565b5b610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90612f79565b60405180910390fd5b6106608585858585610e94565b5050505050565b6000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606081518351146106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da9061300b565b60405180910390fd5b6000835167ffffffffffffffff811115610700576106ff611d4a565b5b60405190808252806020026020018201604052801561072e5781602001602082028036833780820191505090505b50905060005b84518110156107ab5761077b8582815181106107535761075261302b565b5b602002602001015185838151811061076e5761076d61302b565b5b60200260200101516102f2565b82828151811061078e5761078d61302b565b5b602002602001018181525050806107a49061305a565b9050610734565b508091505092915050565b6107be610bc8565b6107c860006111b5565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040517f097d8b1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080633b9aca00858585604051602001610843939291906130ea565b6040516020818303038152906040528051906020012060001c6108669190612acd565b9050809150600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff16156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf9061316f565b60405180910390fd5b6001600860008463ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160028111156109245761092361318f565b5b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600281111561097b5761097a61318f565b5b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109c8858361127b565b6109d2848361127b565b7fcfecaf4dbd097fdeb8922c5c4518cb8e65144446e68a54a071603ea2016b7d2e858584604051610a05939291906131be565b60405180910390a1509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6040517f097d8b1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae3610bc8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4990613267565b60405180910390fd5b610b5b816111b5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bd0610e8c565b73ffffffffffffffffffffffffffffffffffffffff16610bee6107ca565b73ffffffffffffffffffffffffffffffffffffffff1614610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b906132d3565b60405180910390fd5b565b606060006001610c55846112aa565b01905060008167ffffffffffffffff811115610c7457610c73611d4a565b5b6040519080825280601f01601f191660200182016040528015610ca65781602001600182028036833780820191505090505b509050600082602001820190505b600115610d09578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610cfd57610cfc6129eb565b5b04945060008503610cb4575b819350505050919050565b60606000825103610d3657604051806020016040528060008152509050610e87565b60006040518060600160405280604081526020016139436040913990506000600360028551610d6591906132f3565b610d6f9190612a49565b6004610d7b9190613327565b90506000602082610d8c91906132f3565b67ffffffffffffffff811115610da557610da4611d4a565b5b6040519080825280601f01601f191660200182016040528015610dd75781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610e46576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610deb565b600389510660018114610e605760028114610e7057610e7b565b613d3d60f01b6002830352610e7b565b603d60f81b60018303525b50505050508093505050505b919050565b600033905090565b8151835114610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf906133db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3e9061346d565b60405180910390fd5b6000610f51610e8c565b9050610f618187878787876113fd565b60005b8451811015611112576000858281518110610f8257610f8161302b565b5b602002602001015190506000858381518110610fa157610fa061302b565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611039906134ff565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f791906132f3565b925050819055505050508061110b9061305a565b9050610f64565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161118992919061351f565b60405180910390a461119f818787878787611405565b6111ad81878787878761140d565b505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061128782846115e4565b90506112a5838260016040518060200160405280600081525061173e565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611308577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816112fe576112fd6129eb565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611345576d04ee2d6d415b85acef8100000000838161133b5761133a6129eb565b5b0492506020810190505b662386f26fc10000831061137457662386f26fc10000838161136a576113696129eb565b5b0492506010810190505b6305f5e100831061139d576305f5e1008381611393576113926129eb565b5b0492506008810190505b61271083106113c25761271083816113b8576113b76129eb565b5b0492506004810190505b606483106113e557606483816113db576113da6129eb565b5b0492506002810190505b600a83106113f4576001810190505b80915050919050565b505050505050565b505050505050565b61142c8473ffffffffffffffffffffffffffffffffffffffff166118ee565b156115dc578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016114729594939291906135a0565b6020604051808303816000875af19250505080156114ae57506040513d601f19601f820116820180604052508101906114ab919061361d565b60015b611553576114ba613657565b806308c379a00361151657506114ce613679565b806114d95750611518565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150d9190611f6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154a9061377b565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d19061380d565b60405180910390fd5b505b505050505050565b6000600160028111156115fa576115f961318f565b5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361167757600160028111156116535761165261318f565b5b600a8463ffffffff166116669190613327565b61167091906132f3565b9050611738565b60028081111561168a5761168961318f565b5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403611706576002808111156116e2576116e161318f565b5b600a8463ffffffff166116f59190613327565b6116ff91906132f3565b9050611738565b6040517f0259ba8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a49061389f565b60405180910390fd5b60006117b7610e8c565b905060006117c485611911565b905060006117d185611911565b90506117e2836000898585896113fd565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461184191906132f3565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516118bf9291906138bf565b60405180910390a46118d683600089858589611405565b6118e58360008989898961198b565b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000600167ffffffffffffffff8111156119305761192f611d4a565b5b60405190808252806020026020018201604052801561195e5781602001602082028036833780820191505090505b50905082816000815181106119765761197561302b565b5b60200260200101818152505080915050919050565b6119aa8473ffffffffffffffffffffffffffffffffffffffff166118ee565b15611b5a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016119f09594939291906138e8565b6020604051808303816000875af1925050508015611a2c57506040513d601f19601f82011682018060405250810190611a29919061361d565b60015b611ad157611a38613657565b806308c379a003611a945750611a4c613679565b80611a575750611a96565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8b9190611f6a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac89061377b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f9061380d565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba182611b76565b9050919050565b611bb181611b96565b8114611bbc57600080fd5b50565b600081359050611bce81611ba8565b92915050565b6000819050919050565b611be781611bd4565b8114611bf257600080fd5b50565b600081359050611c0481611bde565b92915050565b60008060408385031215611c2157611c20611b6c565b5b6000611c2f85828601611bbf565b9250506020611c4085828601611bf5565b9150509250929050565b611c5381611bd4565b82525050565b6000602082019050611c6e6000830184611c4a565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ca981611c74565b8114611cb457600080fd5b50565b600081359050611cc681611ca0565b92915050565b600060208284031215611ce257611ce1611b6c565b5b6000611cf084828501611cb7565b91505092915050565b60008115159050919050565b611d0e81611cf9565b82525050565b6000602082019050611d296000830184611d05565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d8282611d39565b810181811067ffffffffffffffff82111715611da157611da0611d4a565b5b80604052505050565b6000611db4611b62565b9050611dc08282611d79565b919050565b600067ffffffffffffffff821115611de057611ddf611d4a565b5b611de982611d39565b9050602081019050919050565b82818337600083830152505050565b6000611e18611e1384611dc5565b611daa565b905082815260208101848484011115611e3457611e33611d34565b5b611e3f848285611df6565b509392505050565b600082601f830112611e5c57611e5b611d2f565b5b8135611e6c848260208601611e05565b91505092915050565b600060208284031215611e8b57611e8a611b6c565b5b600082013567ffffffffffffffff811115611ea957611ea8611b71565b5b611eb584828501611e47565b91505092915050565b600060208284031215611ed457611ed3611b6c565b5b6000611ee284828501611bf5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f25578082015181840152602081019050611f0a565b60008484015250505050565b6000611f3c82611eeb565b611f468185611ef6565b9350611f56818560208601611f07565b611f5f81611d39565b840191505092915050565b60006020820190508181036000830152611f848184611f31565b905092915050565b600067ffffffffffffffff821115611fa757611fa6611d4a565b5b602082029050602081019050919050565b600080fd5b6000611fd0611fcb84611f8c565b611daa565b90508083825260208201905060208402830185811115611ff357611ff2611fb8565b5b835b8181101561201c57806120088882611bf5565b845260208401935050602081019050611ff5565b5050509392505050565b600082601f83011261203b5761203a611d2f565b5b813561204b848260208601611fbd565b91505092915050565b600067ffffffffffffffff82111561206f5761206e611d4a565b5b61207882611d39565b9050602081019050919050565b600061209861209384612054565b611daa565b9050828152602081018484840111156120b4576120b3611d34565b5b6120bf848285611df6565b509392505050565b600082601f8301126120dc576120db611d2f565b5b81356120ec848260208601612085565b91505092915050565b600080600080600060a0868803121561211157612110611b6c565b5b600061211f88828901611bbf565b955050602061213088828901611bbf565b945050604086013567ffffffffffffffff81111561215157612150611b71565b5b61215d88828901612026565b935050606086013567ffffffffffffffff81111561217e5761217d611b71565b5b61218a88828901612026565b925050608086013567ffffffffffffffff8111156121ab576121aa611b71565b5b6121b7888289016120c7565b9150509295509295909350565b600063ffffffff82169050919050565b6121dd816121c4565b81146121e857600080fd5b50565b6000813590506121fa816121d4565b92915050565b60006020828403121561221657612215611b6c565b5b6000612224848285016121eb565b91505092915050565b600067ffffffffffffffff82111561224857612247611d4a565b5b602082029050602081019050919050565b600061226c6122678461222d565b611daa565b9050808382526020820190506020840283018581111561228f5761228e611fb8565b5b835b818110156122b857806122a48882611bbf565b845260208401935050602081019050612291565b5050509392505050565b600082601f8301126122d7576122d6611d2f565b5b81356122e7848260208601612259565b91505092915050565b6000806040838503121561230757612306611b6c565b5b600083013567ffffffffffffffff81111561232557612324611b71565b5b612331858286016122c2565b925050602083013567ffffffffffffffff81111561235257612351611b71565b5b61235e85828601612026565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61239d81611bd4565b82525050565b60006123af8383612394565b60208301905092915050565b6000602082019050919050565b60006123d382612368565b6123dd8185612373565b93506123e883612384565b8060005b8381101561241957815161240088826123a3565b975061240b836123bb565b9250506001810190506123ec565b5085935050505092915050565b6000602082019050818103600083015261244081846123c8565b905092915050565b61245181611b96565b82525050565b600060208201905061246c6000830184612448565b92915050565b61247b81611cf9565b811461248657600080fd5b50565b60008135905061249881612472565b92915050565b600080604083850312156124b5576124b4611b6c565b5b60006124c385828601611bbf565b92505060206124d485828601612489565b9150509250929050565b6000806000606084860312156124f7576124f6611b6c565b5b600061250586828701611bbf565b935050602061251686828701611bbf565b925050604084013567ffffffffffffffff81111561253757612536611b71565b5b61254386828701611e47565b9150509250925092565b612556816121c4565b82525050565b6000602082019050612571600083018461254d565b92915050565b6000806040838503121561258e5761258d611b6c565b5b600061259c85828601611bbf565b92505060206125ad85828601611bbf565b9150509250929050565b600080600080600060a086880312156125d3576125d2611b6c565b5b60006125e188828901611bbf565b95505060206125f288828901611bbf565b945050604061260388828901611bf5565b935050606061261488828901611bf5565b925050608086013567ffffffffffffffff81111561263557612634611b71565b5b612641888289016120c7565b9150509295509295909350565b60006020828403121561266457612663611b6c565b5b600061267284828501611bbf565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006126d7602a83611ef6565b91506126e28261267b565b604082019050919050565b60006020820190508181036000830152612706816126ca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061275457607f821691505b6020821081036127675761276661270d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612792565b6127d98683612792565b95508019841693508086168417925050509392505050565b6000819050919050565b600061281661281161280c84611bd4565b6127f1565b611bd4565b9050919050565b6000819050919050565b612830836127fb565b61284461283c8261281d565b84845461279f565b825550505050565b600090565b61285961284c565b612864818484612827565b505050565b5b818110156128885761287d600082612851565b60018101905061286a565b5050565b601f8211156128cd5761289e8161276d565b6128a784612782565b810160208510156128b6578190505b6128ca6128c285612782565b830182612869565b50505b505050565b600082821c905092915050565b60006128f0600019846008026128d2565b1980831691505092915050565b600061290983836128df565b9150826002028217905092915050565b61292282611eeb565b67ffffffffffffffff81111561293b5761293a611d4a565b5b612945825461273c565b61295082828561288c565b600060209050601f8311600181146129835760008415612971578287015190505b61297b85826128fd565b8655506129e3565b601f1984166129918661276d565b60005b828110156129b957848901518255600182019150602085019450602081019050612994565b868310156129d657848901516129d2601f8916826128df565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a5482611bd4565b9150612a5f83611bd4565b925082612a6f57612a6e6129eb565b5b828204905092915050565b600081905092915050565b6000612a9082611eeb565b612a9a8185612a7a565b9350612aaa818560208601611f07565b80840191505092915050565b6000612ac28284612a85565b915081905092915050565b6000612ad882611bd4565b9150612ae383611bd4565b925082612af357612af26129eb565b5b828206905092915050565b60008154612b0b8161273c565b612b158186612a7a565b94506001821660008114612b305760018114612b4557612b78565b60ff1983168652811515820286019350612b78565b612b4e8561276d565b60005b83811015612b7057815481890152600182019150602081019050612b51565b838801955050505b50505092915050565b6000612b8d8285612afe565b9150612b998284612a85565b91508190509392505050565b7f7b226e616d65223a2245766964656e6365204d616e6167656d656e742041636360008201527f65737320546f6b656e2200000000000000000000000000000000000000000000602082015250565b6000612c01602a83612a7a565b9150612c0c82612ba5565b602a82019050919050565b7f226465736372697074696f6e223a224772616e74732061636365737320746f2060008201527f7468652045766964656e6365204d616e6167656d656e742053797374656d222c60208201527f2000000000000000000000000000000000000000000000000000000000000000604082015250565b6000612c99604183612a7a565b9150612ca482612c17565b604182019050919050565b7f2270726f70657274696573223a207b22636173655f6964223a22000000000000600082015250565b6000612ce5601a83612a7a565b9150612cf082612caf565b601a82019050919050565b600081519050919050565b600081905092915050565b6000612d1c82612cfb565b612d268185612d06565b9350612d36818560208601611f07565b80840191505092915050565b7f222c2022726f6c65223a22000000000000000000000000000000000000000000600082015250565b6000612d78600b83612a7a565b9150612d8382612d42565b600b82019050919050565b7f227d2c2022696d616765223a2200000000000000000000000000000000000000600082015250565b6000612dc4600d83612a7a565b9150612dcf82612d8e565b600d82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000612e10600283612a7a565b9150612e1b82612dda565b600282019050919050565b6000612e3182612bf4565b9150612e3c82612c8c565b9150612e4782612cd8565b9150612e538286612d11565b9150612e5e82612d6b565b9150612e6a8285612d11565b9150612e7582612db7565b9150612e818284612d11565b9150612e8c82612e03565b9150819050949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612ecf601d83612a7a565b9150612eda82612e99565b601d82019050919050565b6000612ef082612ec2565b9150612efc8284612a85565b915081905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612f63602e83611ef6565b9150612f6e82612f07565b604082019050919050565b60006020820190508181036000830152612f9281612f56565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612ff5602983611ef6565b915061300082612f99565b604082019050919050565b6000602082019050818103600083015261302481612fe8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061306582611bd4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361309757613096612a1a565b5b600182019050919050565b60008160601b9050919050565b60006130ba826130a2565b9050919050565b60006130cc826130af565b9050919050565b6130e46130df82611b96565b6130c1565b82525050565b60006130f682866130d3565b60148201915061310682856130d3565b6014820191506131168284612a85565b9150819050949350505050565b7f4361736520616c72656164792065786973747321000000000000000000000000600082015250565b6000613159601483611ef6565b915061316482613123565b602082019050919050565b600060208201905081810360008301526131888161314c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006060820190506131d36000830186612448565b6131e06020830185612448565b6131ed604083018461254d565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613251602683611ef6565b915061325c826131f5565b604082019050919050565b6000602082019050818103600083015261328081613244565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132bd602083611ef6565b91506132c882613287565b602082019050919050565b600060208201905081810360008301526132ec816132b0565b9050919050565b60006132fe82611bd4565b915061330983611bd4565b925082820190508082111561332157613320612a1a565b5b92915050565b600061333282611bd4565b915061333d83611bd4565b925082820261334b81611bd4565b9150828204841483151761336257613361612a1a565b5b5092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006133c5602883611ef6565b91506133d082613369565b604082019050919050565b600060208201905081810360008301526133f4816133b8565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613457602583611ef6565b9150613462826133fb565b604082019050919050565b600060208201905081810360008301526134868161344a565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006134e9602a83611ef6565b91506134f48261348d565b604082019050919050565b60006020820190508181036000830152613518816134dc565b9050919050565b6000604082019050818103600083015261353981856123c8565b9050818103602083015261354d81846123c8565b90509392505050565b600082825260208201905092915050565b600061357282612cfb565b61357c8185613556565b935061358c818560208601611f07565b61359581611d39565b840191505092915050565b600060a0820190506135b56000830188612448565b6135c26020830187612448565b81810360408301526135d481866123c8565b905081810360608301526135e881856123c8565b905081810360808301526135fc8184613567565b90509695505050505050565b60008151905061361781611ca0565b92915050565b60006020828403121561363357613632611b6c565b5b600061364184828501613608565b91505092915050565b60008160e01c9050919050565b600060033d11156136765760046000803e61367360005161364a565b90505b90565b600060443d106137065761368b611b62565b60043d036004823e80513d602482011167ffffffffffffffff821117156136b3575050613706565b808201805167ffffffffffffffff8111156136d15750505050613706565b80602083010160043d0385018111156136ee575050505050613706565b6136fd82602001850186611d79565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613765603483611ef6565b915061377082613709565b604082019050919050565b6000602082019050818103600083015261379481613758565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006137f7602883611ef6565b91506138028261379b565b604082019050919050565b60006020820190508181036000830152613826816137ea565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613889602183611ef6565b91506138948261382d565b604082019050919050565b600060208201905081810360008301526138b88161387c565b9050919050565b60006040820190506138d46000830185611c4a565b6138e16020830184611c4a565b9392505050565b600060a0820190506138fd6000830188612448565b61390a6020830187612448565b6139176040830186611c4a565b6139246060830185611c4a565b81810360808301526139368184613567565b9050969550505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122062ff16208f9329e2194ec42704c433315d4bf88281bfdae066aa64c5c396c6b264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e95760003560e01c8063715018a61161008c578063d801532611610066578063d80153261461025a578063e985e9c51461028a578063f242432a146102ba578063f2fde38b146102d6576100e9565b8063715018a6146102165780638da5cb5b14610220578063a22cb4651461023e576100e9565b80630e89341c116100c85780630e89341c1461016a5780632eb2c2d61461019a578063419e2e58146101b65780634e1273f4146101e6576100e9565b8062fdd58e146100ee57806301ffc9a71461011e57806302fe53051461014e575b600080fd5b61010860048036038101906101039190611c0a565b6102f2565b6040516101159190611c59565b60405180910390f35b61013860048036038101906101339190611ccc565b6103ba565b6040516101459190611d14565b60405180910390f35b61016860048036038101906101639190611e75565b61049c565b005b610184600480360381019061017f9190611ebe565b6104b7565b6040516101919190611f6a565b60405180910390f35b6101b460048036038101906101af91906120f5565b6105c6565b005b6101d060048036038101906101cb9190612200565b610667565b6040516101dd9190611d14565b60405180910390f35b61020060048036038101906101fb91906122f0565b61069d565b60405161020d9190612426565b60405180910390f35b61021e6107b6565b005b6102286107ca565b6040516102359190612457565b60405180910390f35b6102586004803603810190610253919061249e565b6107f4565b005b610274600480360381019061026f91906124de565b610826565b604051610281919061255c565b60405180910390f35b6102a4600480360381019061029f9190612577565b610a15565b6040516102b19190611d14565b60405180910390f35b6102d460048036038101906102cf91906125b7565b610aa9565b005b6102f060048036038101906102eb919061264e565b610adb565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610362576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610359906126ed565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610495575061049482610b5e565b5b9050919050565b6104a4610bc8565b80600790816104b39190612919565b5050565b60606105a06104d1600a846104cc9190612a49565b610c46565b6040516020016104e19190612ab6565b604051602081830303815290604052610505600a856105009190612acd565b610c46565b6040516020016105159190612ab6565b604051602081830303815290604052600761053b600a876105369190612acd565b610c46565b60405160200161054c929190612b81565b60405160208183030381529060405260405160200161056b9190612ab6565b60405160208183030381529060405260405160200161058c93929190612e26565b604051602081830303815290604052610d14565b6040516020016105b09190612ee5565b6040516020818303038152906040529050919050565b6105ce610e8c565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061061457506106138561060e610e8c565b610a15565b5b610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90612f79565b60405180910390fd5b6106608585858585610e94565b5050505050565b6000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606081518351146106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da9061300b565b60405180910390fd5b6000835167ffffffffffffffff811115610700576106ff611d4a565b5b60405190808252806020026020018201604052801561072e5781602001602082028036833780820191505090505b50905060005b84518110156107ab5761077b8582815181106107535761075261302b565b5b602002602001015185838151811061076e5761076d61302b565b5b60200260200101516102f2565b82828151811061078e5761078d61302b565b5b602002602001018181525050806107a49061305a565b9050610734565b508091505092915050565b6107be610bc8565b6107c860006111b5565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040517f097d8b1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080633b9aca00858585604051602001610843939291906130ea565b6040516020818303038152906040528051906020012060001c6108669190612acd565b9050809150600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff16156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf9061316f565b60405180910390fd5b6001600860008463ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160028111156109245761092361318f565b5b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600281111561097b5761097a61318f565b5b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109c8858361127b565b6109d2848361127b565b7fcfecaf4dbd097fdeb8922c5c4518cb8e65144446e68a54a071603ea2016b7d2e858584604051610a05939291906131be565b60405180910390a1509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6040517f097d8b1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae3610bc8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4990613267565b60405180910390fd5b610b5b816111b5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bd0610e8c565b73ffffffffffffffffffffffffffffffffffffffff16610bee6107ca565b73ffffffffffffffffffffffffffffffffffffffff1614610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b906132d3565b60405180910390fd5b565b606060006001610c55846112aa565b01905060008167ffffffffffffffff811115610c7457610c73611d4a565b5b6040519080825280601f01601f191660200182016040528015610ca65781602001600182028036833780820191505090505b509050600082602001820190505b600115610d09578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610cfd57610cfc6129eb565b5b04945060008503610cb4575b819350505050919050565b60606000825103610d3657604051806020016040528060008152509050610e87565b60006040518060600160405280604081526020016139436040913990506000600360028551610d6591906132f3565b610d6f9190612a49565b6004610d7b9190613327565b90506000602082610d8c91906132f3565b67ffffffffffffffff811115610da557610da4611d4a565b5b6040519080825280601f01601f191660200182016040528015610dd75781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610e46576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610deb565b600389510660018114610e605760028114610e7057610e7b565b613d3d60f01b6002830352610e7b565b603d60f81b60018303525b50505050508093505050505b919050565b600033905090565b8151835114610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf906133db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3e9061346d565b60405180910390fd5b6000610f51610e8c565b9050610f618187878787876113fd565b60005b8451811015611112576000858281518110610f8257610f8161302b565b5b602002602001015190506000858381518110610fa157610fa061302b565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611039906134ff565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f791906132f3565b925050819055505050508061110b9061305a565b9050610f64565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161118992919061351f565b60405180910390a461119f818787878787611405565b6111ad81878787878761140d565b505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061128782846115e4565b90506112a5838260016040518060200160405280600081525061173e565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611308577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816112fe576112fd6129eb565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611345576d04ee2d6d415b85acef8100000000838161133b5761133a6129eb565b5b0492506020810190505b662386f26fc10000831061137457662386f26fc10000838161136a576113696129eb565b5b0492506010810190505b6305f5e100831061139d576305f5e1008381611393576113926129eb565b5b0492506008810190505b61271083106113c25761271083816113b8576113b76129eb565b5b0492506004810190505b606483106113e557606483816113db576113da6129eb565b5b0492506002810190505b600a83106113f4576001810190505b80915050919050565b505050505050565b505050505050565b61142c8473ffffffffffffffffffffffffffffffffffffffff166118ee565b156115dc578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016114729594939291906135a0565b6020604051808303816000875af19250505080156114ae57506040513d601f19601f820116820180604052508101906114ab919061361d565b60015b611553576114ba613657565b806308c379a00361151657506114ce613679565b806114d95750611518565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150d9190611f6a565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154a9061377b565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d19061380d565b60405180910390fd5b505b505050505050565b6000600160028111156115fa576115f961318f565b5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361167757600160028111156116535761165261318f565b5b600a8463ffffffff166116669190613327565b61167091906132f3565b9050611738565b60028081111561168a5761168961318f565b5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403611706576002808111156116e2576116e161318f565b5b600a8463ffffffff166116f59190613327565b6116ff91906132f3565b9050611738565b6040517f0259ba8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a49061389f565b60405180910390fd5b60006117b7610e8c565b905060006117c485611911565b905060006117d185611911565b90506117e2836000898585896113fd565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461184191906132f3565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516118bf9291906138bf565b60405180910390a46118d683600089858589611405565b6118e58360008989898961198b565b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000600167ffffffffffffffff8111156119305761192f611d4a565b5b60405190808252806020026020018201604052801561195e5781602001602082028036833780820191505090505b50905082816000815181106119765761197561302b565b5b60200260200101818152505080915050919050565b6119aa8473ffffffffffffffffffffffffffffffffffffffff166118ee565b15611b5a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016119f09594939291906138e8565b6020604051808303816000875af1925050508015611a2c57506040513d601f19601f82011682018060405250810190611a29919061361d565b60015b611ad157611a38613657565b806308c379a003611a945750611a4c613679565b80611a575750611a96565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8b9190611f6a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac89061377b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f9061380d565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba182611b76565b9050919050565b611bb181611b96565b8114611bbc57600080fd5b50565b600081359050611bce81611ba8565b92915050565b6000819050919050565b611be781611bd4565b8114611bf257600080fd5b50565b600081359050611c0481611bde565b92915050565b60008060408385031215611c2157611c20611b6c565b5b6000611c2f85828601611bbf565b9250506020611c4085828601611bf5565b9150509250929050565b611c5381611bd4565b82525050565b6000602082019050611c6e6000830184611c4a565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ca981611c74565b8114611cb457600080fd5b50565b600081359050611cc681611ca0565b92915050565b600060208284031215611ce257611ce1611b6c565b5b6000611cf084828501611cb7565b91505092915050565b60008115159050919050565b611d0e81611cf9565b82525050565b6000602082019050611d296000830184611d05565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d8282611d39565b810181811067ffffffffffffffff82111715611da157611da0611d4a565b5b80604052505050565b6000611db4611b62565b9050611dc08282611d79565b919050565b600067ffffffffffffffff821115611de057611ddf611d4a565b5b611de982611d39565b9050602081019050919050565b82818337600083830152505050565b6000611e18611e1384611dc5565b611daa565b905082815260208101848484011115611e3457611e33611d34565b5b611e3f848285611df6565b509392505050565b600082601f830112611e5c57611e5b611d2f565b5b8135611e6c848260208601611e05565b91505092915050565b600060208284031215611e8b57611e8a611b6c565b5b600082013567ffffffffffffffff811115611ea957611ea8611b71565b5b611eb584828501611e47565b91505092915050565b600060208284031215611ed457611ed3611b6c565b5b6000611ee284828501611bf5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f25578082015181840152602081019050611f0a565b60008484015250505050565b6000611f3c82611eeb565b611f468185611ef6565b9350611f56818560208601611f07565b611f5f81611d39565b840191505092915050565b60006020820190508181036000830152611f848184611f31565b905092915050565b600067ffffffffffffffff821115611fa757611fa6611d4a565b5b602082029050602081019050919050565b600080fd5b6000611fd0611fcb84611f8c565b611daa565b90508083825260208201905060208402830185811115611ff357611ff2611fb8565b5b835b8181101561201c57806120088882611bf5565b845260208401935050602081019050611ff5565b5050509392505050565b600082601f83011261203b5761203a611d2f565b5b813561204b848260208601611fbd565b91505092915050565b600067ffffffffffffffff82111561206f5761206e611d4a565b5b61207882611d39565b9050602081019050919050565b600061209861209384612054565b611daa565b9050828152602081018484840111156120b4576120b3611d34565b5b6120bf848285611df6565b509392505050565b600082601f8301126120dc576120db611d2f565b5b81356120ec848260208601612085565b91505092915050565b600080600080600060a0868803121561211157612110611b6c565b5b600061211f88828901611bbf565b955050602061213088828901611bbf565b945050604086013567ffffffffffffffff81111561215157612150611b71565b5b61215d88828901612026565b935050606086013567ffffffffffffffff81111561217e5761217d611b71565b5b61218a88828901612026565b925050608086013567ffffffffffffffff8111156121ab576121aa611b71565b5b6121b7888289016120c7565b9150509295509295909350565b600063ffffffff82169050919050565b6121dd816121c4565b81146121e857600080fd5b50565b6000813590506121fa816121d4565b92915050565b60006020828403121561221657612215611b6c565b5b6000612224848285016121eb565b91505092915050565b600067ffffffffffffffff82111561224857612247611d4a565b5b602082029050602081019050919050565b600061226c6122678461222d565b611daa565b9050808382526020820190506020840283018581111561228f5761228e611fb8565b5b835b818110156122b857806122a48882611bbf565b845260208401935050602081019050612291565b5050509392505050565b600082601f8301126122d7576122d6611d2f565b5b81356122e7848260208601612259565b91505092915050565b6000806040838503121561230757612306611b6c565b5b600083013567ffffffffffffffff81111561232557612324611b71565b5b612331858286016122c2565b925050602083013567ffffffffffffffff81111561235257612351611b71565b5b61235e85828601612026565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61239d81611bd4565b82525050565b60006123af8383612394565b60208301905092915050565b6000602082019050919050565b60006123d382612368565b6123dd8185612373565b93506123e883612384565b8060005b8381101561241957815161240088826123a3565b975061240b836123bb565b9250506001810190506123ec565b5085935050505092915050565b6000602082019050818103600083015261244081846123c8565b905092915050565b61245181611b96565b82525050565b600060208201905061246c6000830184612448565b92915050565b61247b81611cf9565b811461248657600080fd5b50565b60008135905061249881612472565b92915050565b600080604083850312156124b5576124b4611b6c565b5b60006124c385828601611bbf565b92505060206124d485828601612489565b9150509250929050565b6000806000606084860312156124f7576124f6611b6c565b5b600061250586828701611bbf565b935050602061251686828701611bbf565b925050604084013567ffffffffffffffff81111561253757612536611b71565b5b61254386828701611e47565b9150509250925092565b612556816121c4565b82525050565b6000602082019050612571600083018461254d565b92915050565b6000806040838503121561258e5761258d611b6c565b5b600061259c85828601611bbf565b92505060206125ad85828601611bbf565b9150509250929050565b600080600080600060a086880312156125d3576125d2611b6c565b5b60006125e188828901611bbf565b95505060206125f288828901611bbf565b945050604061260388828901611bf5565b935050606061261488828901611bf5565b925050608086013567ffffffffffffffff81111561263557612634611b71565b5b612641888289016120c7565b9150509295509295909350565b60006020828403121561266457612663611b6c565b5b600061267284828501611bbf565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006126d7602a83611ef6565b91506126e28261267b565b604082019050919050565b60006020820190508181036000830152612706816126ca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061275457607f821691505b6020821081036127675761276661270d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612792565b6127d98683612792565b95508019841693508086168417925050509392505050565b6000819050919050565b600061281661281161280c84611bd4565b6127f1565b611bd4565b9050919050565b6000819050919050565b612830836127fb565b61284461283c8261281d565b84845461279f565b825550505050565b600090565b61285961284c565b612864818484612827565b505050565b5b818110156128885761287d600082612851565b60018101905061286a565b5050565b601f8211156128cd5761289e8161276d565b6128a784612782565b810160208510156128b6578190505b6128ca6128c285612782565b830182612869565b50505b505050565b600082821c905092915050565b60006128f0600019846008026128d2565b1980831691505092915050565b600061290983836128df565b9150826002028217905092915050565b61292282611eeb565b67ffffffffffffffff81111561293b5761293a611d4a565b5b612945825461273c565b61295082828561288c565b600060209050601f8311600181146129835760008415612971578287015190505b61297b85826128fd565b8655506129e3565b601f1984166129918661276d565b60005b828110156129b957848901518255600182019150602085019450602081019050612994565b868310156129d657848901516129d2601f8916826128df565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a5482611bd4565b9150612a5f83611bd4565b925082612a6f57612a6e6129eb565b5b828204905092915050565b600081905092915050565b6000612a9082611eeb565b612a9a8185612a7a565b9350612aaa818560208601611f07565b80840191505092915050565b6000612ac28284612a85565b915081905092915050565b6000612ad882611bd4565b9150612ae383611bd4565b925082612af357612af26129eb565b5b828206905092915050565b60008154612b0b8161273c565b612b158186612a7a565b94506001821660008114612b305760018114612b4557612b78565b60ff1983168652811515820286019350612b78565b612b4e8561276d565b60005b83811015612b7057815481890152600182019150602081019050612b51565b838801955050505b50505092915050565b6000612b8d8285612afe565b9150612b998284612a85565b91508190509392505050565b7f7b226e616d65223a2245766964656e6365204d616e6167656d656e742041636360008201527f65737320546f6b656e2200000000000000000000000000000000000000000000602082015250565b6000612c01602a83612a7a565b9150612c0c82612ba5565b602a82019050919050565b7f226465736372697074696f6e223a224772616e74732061636365737320746f2060008201527f7468652045766964656e6365204d616e6167656d656e742053797374656d222c60208201527f2000000000000000000000000000000000000000000000000000000000000000604082015250565b6000612c99604183612a7a565b9150612ca482612c17565b604182019050919050565b7f2270726f70657274696573223a207b22636173655f6964223a22000000000000600082015250565b6000612ce5601a83612a7a565b9150612cf082612caf565b601a82019050919050565b600081519050919050565b600081905092915050565b6000612d1c82612cfb565b612d268185612d06565b9350612d36818560208601611f07565b80840191505092915050565b7f222c2022726f6c65223a22000000000000000000000000000000000000000000600082015250565b6000612d78600b83612a7a565b9150612d8382612d42565b600b82019050919050565b7f227d2c2022696d616765223a2200000000000000000000000000000000000000600082015250565b6000612dc4600d83612a7a565b9150612dcf82612d8e565b600d82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000612e10600283612a7a565b9150612e1b82612dda565b600282019050919050565b6000612e3182612bf4565b9150612e3c82612c8c565b9150612e4782612cd8565b9150612e538286612d11565b9150612e5e82612d6b565b9150612e6a8285612d11565b9150612e7582612db7565b9150612e818284612d11565b9150612e8c82612e03565b9150819050949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612ecf601d83612a7a565b9150612eda82612e99565b601d82019050919050565b6000612ef082612ec2565b9150612efc8284612a85565b915081905092915050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612f63602e83611ef6565b9150612f6e82612f07565b604082019050919050565b60006020820190508181036000830152612f9281612f56565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612ff5602983611ef6565b915061300082612f99565b604082019050919050565b6000602082019050818103600083015261302481612fe8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061306582611bd4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361309757613096612a1a565b5b600182019050919050565b60008160601b9050919050565b60006130ba826130a2565b9050919050565b60006130cc826130af565b9050919050565b6130e46130df82611b96565b6130c1565b82525050565b60006130f682866130d3565b60148201915061310682856130d3565b6014820191506131168284612a85565b9150819050949350505050565b7f4361736520616c72656164792065786973747321000000000000000000000000600082015250565b6000613159601483611ef6565b915061316482613123565b602082019050919050565b600060208201905081810360008301526131888161314c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006060820190506131d36000830186612448565b6131e06020830185612448565b6131ed604083018461254d565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613251602683611ef6565b915061325c826131f5565b604082019050919050565b6000602082019050818103600083015261328081613244565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132bd602083611ef6565b91506132c882613287565b602082019050919050565b600060208201905081810360008301526132ec816132b0565b9050919050565b60006132fe82611bd4565b915061330983611bd4565b925082820190508082111561332157613320612a1a565b5b92915050565b600061333282611bd4565b915061333d83611bd4565b925082820261334b81611bd4565b9150828204841483151761336257613361612a1a565b5b5092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006133c5602883611ef6565b91506133d082613369565b604082019050919050565b600060208201905081810360008301526133f4816133b8565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613457602583611ef6565b9150613462826133fb565b604082019050919050565b600060208201905081810360008301526134868161344a565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006134e9602a83611ef6565b91506134f48261348d565b604082019050919050565b60006020820190508181036000830152613518816134dc565b9050919050565b6000604082019050818103600083015261353981856123c8565b9050818103602083015261354d81846123c8565b90509392505050565b600082825260208201905092915050565b600061357282612cfb565b61357c8185613556565b935061358c818560208601611f07565b61359581611d39565b840191505092915050565b600060a0820190506135b56000830188612448565b6135c26020830187612448565b81810360408301526135d481866123c8565b905081810360608301526135e881856123c8565b905081810360808301526135fc8184613567565b90509695505050505050565b60008151905061361781611ca0565b92915050565b60006020828403121561363357613632611b6c565b5b600061364184828501613608565b91505092915050565b60008160e01c9050919050565b600060033d11156136765760046000803e61367360005161364a565b90505b90565b600060443d106137065761368b611b62565b60043d036004823e80513d602482011167ffffffffffffffff821117156136b3575050613706565b808201805167ffffffffffffffff8111156136d15750505050613706565b80602083010160043d0385018111156136ee575050505050613706565b6136fd82602001850186611d79565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613765603483611ef6565b915061377082613709565b604082019050919050565b6000602082019050818103600083015261379481613758565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006137f7602883611ef6565b91506138028261379b565b604082019050919050565b60006020820190508181036000830152613826816137ea565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613889602183611ef6565b91506138948261382d565b604082019050919050565b600060208201905081810360008301526138b88161387c565b9050919050565b60006040820190506138d46000830185611c4a565b6138e16020830184611c4a565b9392505050565b600060a0820190506138fd6000830188612448565b61390a6020830187612448565b6139176040830186611c4a565b6139246060830185611c4a565b81810360808301526139368184613567565b9050969550505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122062ff16208f9329e2194ec42704c433315d4bf88281bfdae066aa64c5c396c6b264736f6c63430008110033",
  "devdoc": {
    "author": "ekiio",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "doesCaseExist(uint32)": {
        "details": "Simple getter function for the frontend to check if a user tries      to open a case with the same parameters twice."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "openCase(address,address,string)": {
        "details": "Called by frontend to open a new case. Creates a unique case ID         from the address of the parties as well as a short string which         is given to the case, e.g. an official case tracking number or         other unique identifier. The last 9 digits of this hash will         become the unique caseId. Throws an error when case already         exists. Creates internal records and finally calls the method         that will mint the unique access token for the evidence         submission data room."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "setURI(string)": {
        "details": "If a new storage address needs to be set, this function will      update the address at which the token images will be stored."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "Sets token metadata. All relevant access data can already be         deducted from the tokenId but for extra clarity and security,         having the metadata on chain might help."
      }
    },
    "title": "Case Manager of the Evidence Management System",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "openCase(address,address,string)": {
        "notice": "Following convention of naming cases. \"A v B\" and \"B v A\" are         to be treated as two separate cases, so parties A and B are         not interchangable."
      },
      "uri(uint256)": {
        "notice": "Image URL will have a simple icon depicting the role, i.e. have         a document icon for the parties, and a judge's gavel for jurors"
      }
    },
    "notice": "This contract is the central piece of the evidence management         systems. Users will be able to open a new case, given the         addresses of the dispute party and a case name (which can be         an official tracking number to make it a unique identifier).         Once a case has been created, the dispute parties will be issued         an access NFT with a unique token ID hat allows for access control,         differentiating of roles (party or juror) in the case, and -         ultimately - the encryption and decryption of files uploaded on the         frontend to IPFS, using the functionality provided by Lit Protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1511,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_baseURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1515,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3171,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3173,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "s_baseURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3177,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "caseExists",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 3181,
        "contract": "contracts/CaseManager.sol:CaseManager",
        "label": "hasRole",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}