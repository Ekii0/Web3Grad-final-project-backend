{
  "address": "0xEC6B0295fDb988952652ed75e1EECC3e94237A46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caseManagerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__Busy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__CaseHasNoDocuments",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__DocumentAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__DocumentDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__DoesNotCoverFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__RenouncingOwnershipNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DocumentNotary__UserHasNoDocuments",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCaseManagerAddress",
          "type": "address"
        }
      ],
      "name": "NewCaseManagerAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_caseId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "NewDocumentFiled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "NewFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_caseId",
          "type": "uint32"
        }
      ],
      "name": "getDocument",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "caseId",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            }
          ],
          "internalType": "struct DocumentNotary.Document",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_caseId",
          "type": "uint32"
        }
      ],
      "name": "getDocumentsByCaseId",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getDocumentsByUser",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCaseManagerAddress",
          "type": "address"
        }
      ],
      "name": "setCaseManagerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_caseId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "storeDocumentHash",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5eb82825216f80d0176f254ebaede7f38de2d2e44463fca6c1dcdebb56c73f2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xEC6B0295fDb988952652ed75e1EECC3e94237A46",
    "transactionIndex": 0,
    "gasUsed": "1487957",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x117a3c5c8be6148a15b3e4d2ecd8d3a83e2755542bf1393d8ac2f4c7d4bcf277",
    "transactionHash": "0xd5eb82825216f80d0176f254ebaede7f38de2d2e44463fca6c1dcdebb56c73f2",
    "logs": [],
    "blockNumber": 36891180,
    "cumulativeGasUsed": "1487957",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEAf918cc3aba362aDFBf6Ce1D95039bF4EbDB259"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd34cd8bafaafeb839cddf5aca6da4db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caseManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DocumentNotary__Busy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__CaseHasNoDocuments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__DocumentAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__DocumentDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__DoesNotCoverFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__RenouncingOwnershipNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DocumentNotary__UserHasNoDocuments\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCaseManagerAddress\",\"type\":\"address\"}],\"name\":\"NewCaseManagerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_caseId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"NewDocumentFiled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"NewFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_caseId\",\"type\":\"uint32\"}],\"name\":\"getDocument\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"caseId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct DocumentNotary.Document\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_caseId\",\"type\":\"uint32\"}],\"name\":\"getDocumentsByCaseId\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getDocumentsByUser\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCaseManagerAddress\",\"type\":\"address\"}],\"name\":\"setCaseManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_caseId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"storeDocumentHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ekiio\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the contract owner's address. Also sets the address to the      CaseManager contract which is required to check if the user who      wants to upload files is authorized by the CaseManager contract      to do so, i.e. that they have the \\\"Party\\\" NFT to the _caseId.\"},\"getDocument(bytes32,uint32)\":{\"details\":\"Queries the internal file cabinet for the requested document and      returns the Document struct with the stored metadata. Throws an      error if the hash could not be found in internal records.\"},\"getDocumentsByCaseId(uint32)\":{\"details\":\"Returns an array of all document hashes that have been submitted      for a specific case. This will make presenting all the evidence      to the jury possible.\"},\"getDocumentsByUser(address)\":{\"details\":\"Returns all the hashes a user has ever uploaded to the evidence      management system. This makes it easier to show users of the      dispute resolution platform all their submitted documents, e.g.      on their dashboard.\"},\"getFee()\":{\"details\":\"Gets the current fee payable for using storeDocumentHash().\"},\"setCaseManagerAddress(address)\":{\"details\":\"Sets a new CaseManagerAddress to make the contract upgradeable.\"},\"setFee(uint256)\":{\"details\":\"Sets a new fee to be paid for using the storeDocumentHash function\"},\"storeDocumentHash(bytes32,uint32,string)\":{\"details\":\"Stores a file's hash in the internal file cabinet if it has not      already been stored. Emits an event that a new Document has been      registered. Throws an error if the document is already registered.      Can only be accessed by the parties of the case, so the function      first checks for ownership of the corresponding NFT.      Has a simple reentrancy guard that checks if the function has      already been called and will revert if it is so. The function has      to do quite a few sanity checks before any operations are done, so      having a reentrancy guard in place will prevent double storage.\",\"params\":{\"_ipfsHash\":\"Currently of type string but this is very expensive. A        better approach for future versions would be to store a bytes32        type. This would require slicing off the first two bytes of the        IPFS hash which represent the hash version function, and store        the remainder in a bytes32 variable.        See; https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32/17112#17112\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of contract to new address. Renouncing      ownership is not allowed and will revert.\"},\"withdrawFunds()\":{\"details\":\"Allows the contract owner to withdraw the contract's entire balance\"}},\"title\":\"Document Notary - Proof Of Existence\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A simple contract that stores a file's hash alongside the sender's         address, the corresponding case ID and a timestamp in a Document         struct. Will proove existence of an untampered file at a specific         point in time, which is particularly useful for an evidence         management system. A jury will be able to get a collection of facts         to a specific case on which they can e.g. vote if the evidence put         forth is truthful and will be admitted, e.g. in a court hearing or         in an arbitration.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DocumentNotary.sol\":\"DocumentNotary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DocumentNotary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nerror DocumentNotary__DocumentAlreadyExists();\\nerror DocumentNotary__DocumentDoesNotExist();\\nerror DocumentNotary__UserHasNoDocuments();\\nerror DocumentNotary__CaseHasNoDocuments();\\nerror DocumentNotary__DoesNotCoverFees();\\nerror DocumentNotary__NotAuthorized();\\nerror DocumentNotary__RenouncingOwnershipNotAllowed();\\nerror DocumentNotary__Busy();\\n\\n/// @title  Document Notary - Proof Of Existence\\n/// @author ekiio\\n/// @notice A simple contract that stores a file's hash alongside the sender's\\n///         address, the corresponding case ID and a timestamp in a Document\\n///         struct. Will proove existence of an untampered file at a specific\\n///         point in time, which is particularly useful for an evidence\\n///         management system. A jury will be able to get a collection of facts\\n///         to a specific case on which they can e.g. vote if the evidence put\\n///         forth is truthful and will be admitted, e.g. in a court hearing or\\n///         in an arbitration.\\ncontract DocumentNotary {\\n    struct Document {\\n        bytes32 hash;\\n        address owner;\\n        uint32 caseId;\\n        string ipfsHash;\\n    }\\n\\n    mapping(uint32 => mapping(bytes32 => Document)) private cabinet;\\n    mapping(address => bytes32[]) private userDocs;\\n    mapping(address => bool) private userHasDocs;\\n    // Note: Some gas can be saved by not using a boolean but a numerical system,\\n    //       e.g. using 0 for 'false' and 1 for 'true'. I am still using boolean\\n    //       types here to make the code easier to read. Deploying to a low-cost\\n    //       L2 network like Polygon, Optimism or Arbitrum, this shouldn't make\\n    //       too much of a difference.\\n    mapping(uint32 => bytes32[]) private caseDocs;\\n    mapping(uint32 => mapping(bytes32 => bool)) private caseHasDocs;\\n\\n    address private s_owner;\\n    address private s_caseManagerAddress;\\n    ERC1155 internal s_caseManager;\\n    uint256 private s_fee = 0.5 ether; // Set fee to 0.5 MATIC (~ 0.45 USD atm)\\n    bool private busy;\\n\\n    event NewDocumentFiled(\\n        bytes32 indexed _hash,\\n        uint32 _caseId,\\n        string _ipfsHash\\n    );\\n    event NewCaseManagerAddressSet(address _newCaseManagerAddress);\\n    event OwnershipTransferred(address _oldOwner, address _newOwner);\\n    event NewFeeSet(uint256 _newFee);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != s_owner) {\\n            revert DocumentNotary__NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Sets the contract owner's address. Also sets the address to the\\n    ///      CaseManager contract which is required to check if the user who\\n    ///      wants to upload files is authorized by the CaseManager contract\\n    ///      to do so, i.e. that they have the \\\"Party\\\" NFT to the _caseId.\\n    constructor(address _caseManagerAddress) {\\n        s_owner = msg.sender;\\n        s_caseManagerAddress = _caseManagerAddress;\\n        s_caseManager = ERC1155(s_caseManagerAddress);\\n    }\\n\\n    /// @dev Stores a file's hash in the internal file cabinet if it has not\\n    ///      already been stored. Emits an event that a new Document has been\\n    ///      registered. Throws an error if the document is already registered.\\n    ///      Can only be accessed by the parties of the case, so the function\\n    ///      first checks for ownership of the corresponding NFT.\\n    ///      Has a simple reentrancy guard that checks if the function has\\n    ///      already been called and will revert if it is so. The function has\\n    ///      to do quite a few sanity checks before any operations are done, so\\n    ///      having a reentrancy guard in place will prevent double storage.\\n    /// @param _ipfsHash Currently of type string but this is very expensive. A\\n    ///        better approach for future versions would be to store a bytes32\\n    ///        type. This would require slicing off the first two bytes of the\\n    ///        IPFS hash which represent the hash version function, and store\\n    ///        the remainder in a bytes32 variable.\\n    ///        See; https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32/17112#17112\\n    function storeDocumentHash(\\n        bytes32 _hash,\\n        uint32 _caseId,\\n        string memory _ipfsHash\\n    ) external payable {\\n        if (busy) {\\n            revert DocumentNotary__Busy();\\n        }\\n        busy = true;\\n        /* if (s_caseManager.balanceOf(msg.sender, (_caseId * 10 + 1)) < 1) {\\n            revert DocumentNotary__NotAuthorized();\\n        } */\\n        if (msg.value < s_fee) {\\n            revert DocumentNotary__DoesNotCoverFees();\\n        }\\n        if (caseHasDocs[_caseId][_hash]) {\\n            revert DocumentNotary__DocumentAlreadyExists();\\n        }\\n        Document memory newDoc = Document(\\n            _hash,\\n            msg.sender,\\n            _caseId,\\n            _ipfsHash\\n            //uint64(block.timestamp)\\n        );\\n\\n        userHasDocs[msg.sender] = true;\\n        caseHasDocs[_caseId][_hash] = true;\\n        cabinet[_caseId][_hash] = newDoc;\\n        userDocs[msg.sender].push(_hash);\\n        caseDocs[_caseId].push(_hash);\\n        busy = false;\\n        emit NewDocumentFiled(_hash, _caseId, _ipfsHash);\\n    }\\n\\n    /// @dev Queries the internal file cabinet for the requested document and\\n    ///      returns the Document struct with the stored metadata. Throws an\\n    ///      error if the hash could not be found in internal records.\\n    function getDocument(\\n        bytes32 _hash,\\n        uint32 _caseId\\n    ) public view returns (Document memory) {\\n        if (!caseHasDocs[_caseId][_hash]) {\\n            revert DocumentNotary__DocumentDoesNotExist();\\n        }\\n        return cabinet[_caseId][_hash];\\n    }\\n\\n    /// @dev Returns all the hashes a user has ever uploaded to the evidence\\n    ///      management system. This makes it easier to show users of the\\n    ///      dispute resolution platform all their submitted documents, e.g.\\n    ///      on their dashboard.\\n    function getDocumentsByUser(\\n        address _userAddress\\n    ) public view returns (bytes32[] memory) {\\n        if (!userHasDocs[_userAddress]) {\\n            revert DocumentNotary__UserHasNoDocuments();\\n        }\\n        return userDocs[_userAddress];\\n    }\\n\\n    /// @dev Returns an array of all document hashes that have been submitted\\n    ///      for a specific case. This will make presenting all the evidence\\n    ///      to the jury possible.\\n    function getDocumentsByCaseId(\\n        uint32 _caseId\\n    ) public view returns (bytes32[] memory) {\\n        if (caseDocs[_caseId].length == 0) {\\n            revert DocumentNotary__CaseHasNoDocuments();\\n        }\\n        return caseDocs[_caseId];\\n    }\\n\\n    /// @dev Sets a new CaseManagerAddress to make the contract upgradeable.\\n    function setCaseManagerAddress(\\n        address _newCaseManagerAddress\\n    ) external onlyOwner {\\n        s_caseManagerAddress = _newCaseManagerAddress;\\n        s_caseManager = ERC1155(s_caseManagerAddress);\\n        emit NewCaseManagerAddressSet(_newCaseManagerAddress);\\n    }\\n\\n    /// @dev Transfers ownership of contract to new address. Renouncing\\n    ///      ownership is not allowed and will revert.\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        if (_newOwner == address(0)) {\\n            revert DocumentNotary__RenouncingOwnershipNotAllowed();\\n        }\\n        address _oldOwner = s_owner;\\n        s_owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /// @dev Sets a new fee to be paid for using the storeDocumentHash function\\n    function setFee(uint256 _newFee) external onlyOwner {\\n        s_fee = _newFee;\\n        emit NewFeeSet(_newFee);\\n    }\\n\\n    /// @dev Allows the contract owner to withdraw the contract's entire balance\\n    function withdrawFunds() external onlyOwner {\\n        payable(s_owner).transfer(address(this).balance);\\n    }\\n\\n    /// @dev Gets the current fee payable for using storeDocumentHash().\\n    function getFee() public view returns (uint256) {\\n        return s_fee;\\n    }\\n\\n    /* ToDo: - Make storeDocumentHash only be callable by the dispute parties,\\n               and only within a specified timeframe, otherwise everyone could\\n               call the function and store documents at any time, even before a\\n               case has been opened for dispute settlement.\\n               That is, check if msg.sender has the access NFT.\\n     */\\n}\\n\",\"keccak256\":\"0x25ac26337d2286816564c3f8322c4dc9d9f9a1ba2afa8a5f845d1b1743c23e23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526706f05b59d3b200006008553480156200001d57600080fd5b5060405162001a2a38038062001a2a833981810160405281019062000043919062000199565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001618262000134565b9050919050565b620001738162000154565b81146200017f57600080fd5b50565b600081519050620001938162000168565b92915050565b600060208284031215620001b257620001b16200012f565b5b6000620001c28482850162000182565b91505092915050565b61184f80620001db6000396000f3fe6080604052600436106100865760003560e01c80637f94cbbe116100595780637f94cbbe14610124578063ced72f871461014d578063d7eaaccc14610178578063e6a500be146101b5578063f2fde38b146101f257610086565b80630b4ea5271461008b57806324600fc3146100a75780635e3c461a146100be57806369fe0e2d146100fb575b600080fd5b6100a560048036038101906100a09190611069565b61021b565b005b3480156100b357600080fd5b506100bc6105d8565b005b3480156100ca57600080fd5b506100e560048036038101906100e091906110d8565b6106ca565b6040516100f29190611259565b60405180910390f35b34801561010757600080fd5b50610122600480360381019061011d91906112b1565b6108a0565b005b34801561013057600080fd5b5061014b6004803603810190610146919061130a565b610968565b005b34801561015957600080fd5b50610162610acd565b60405161016f9190611346565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a919061130a565b610ad7565b6040516101ac9190611410565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d79190611432565b610bf1565b6040516101e99190611410565b60405180910390f35b3480156101fe57600080fd5b506102196004803603810190610214919061130a565b610cc4565b005b600960009054906101000a900460ff1615610262576040517f3bb4928c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600960006101000a81548160ff0219169083151502179055506008543410156102b9576040517f6bf2f73600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008363ffffffff1663ffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff161561032e576040517f2095a55300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018381525090506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008563ffffffff1663ffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550806000808563ffffffff1663ffffffff16815260200190815260200160002060008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020190816104cd919061166b565b50905050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190915055600360008463ffffffff1663ffffffff1681526020019081526020016000208490806001815401808255809150506001900390600052602060002001600090919091909150556000600960006101000a81548160ff021916908315150217905550837fcb19ace03a64d193c1021f327f4f61ae782ebcbd993505af55db895d74efc6c484846040516105ca929190611796565b60405180910390a250505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106c7573d6000803e3d6000fd5b50565b6106d2610e56565b600460008363ffffffff1663ffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16610746576040517f46f0620200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808363ffffffff1663ffffffff1681526020019081526020016000206000848152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820180546108169061148e565b80601f01602080910402602001604051908101604052809291908181526020018280546108429061148e565b801561088f5780601f106108645761010080835404028352916020019161088f565b820191906000526020600020905b81548152906001019060200180831161087257829003601f168201915b505050505081525050905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610927576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806008819055507f7214ada276dda68e2460c8f5b3a610e54171aeab13399f9fb3653226d30c327e8160405161095d9190611346565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ef576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f059b4b542fc788264839fa7e2bc6c9c62b3b799f5bbbda27432d114599e2c21a81604051610ac291906117d5565b60405180910390a150565b6000600854905090565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b5c576040517f101f2aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610be557602002820191906000526020600020905b815481526020019060010190808311610bd1575b50505050509050919050565b60606000600360008463ffffffff1663ffffffff1681526020019081526020016000208054905003610c4f576040517f641b777000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008363ffffffff1663ffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cb857602002820191906000526020600020905b815481526020019060010190808311610ca4575b50505050509050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4b576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610db1576040517f3c2896a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08183604051610e4a9291906117f0565b60405180910390a15050565b604051806080016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ec481610eb1565b8114610ecf57600080fd5b50565b600081359050610ee181610ebb565b92915050565b600063ffffffff82169050919050565b610f0081610ee7565b8114610f0b57600080fd5b50565b600081359050610f1d81610ef7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7682610f2d565b810181811067ffffffffffffffff82111715610f9557610f94610f3e565b5b80604052505050565b6000610fa8610e9d565b9050610fb48282610f6d565b919050565b600067ffffffffffffffff821115610fd457610fd3610f3e565b5b610fdd82610f2d565b9050602081019050919050565b82818337600083830152505050565b600061100c61100784610fb9565b610f9e565b90508281526020810184848401111561102857611027610f28565b5b611033848285610fea565b509392505050565b600082601f8301126110505761104f610f23565b5b8135611060848260208601610ff9565b91505092915050565b60008060006060848603121561108257611081610ea7565b5b600061109086828701610ed2565b93505060206110a186828701610f0e565b925050604084013567ffffffffffffffff8111156110c2576110c1610eac565b5b6110ce8682870161103b565b9150509250925092565b600080604083850312156110ef576110ee610ea7565b5b60006110fd85828601610ed2565b925050602061110e85828601610f0e565b9150509250929050565b61112181610eb1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061115282611127565b9050919050565b61116281611147565b82525050565b61117181610ee7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111b1578082015181840152602081019050611196565b60008484015250505050565b60006111c882611177565b6111d28185611182565b93506111e2818560208601611193565b6111eb81610f2d565b840191505092915050565b600060808301600083015161120e6000860182611118565b5060208301516112216020860182611159565b5060408301516112346040860182611168565b506060830151848203606086015261124c82826111bd565b9150508091505092915050565b6000602082019050818103600083015261127381846111f6565b905092915050565b6000819050919050565b61128e8161127b565b811461129957600080fd5b50565b6000813590506112ab81611285565b92915050565b6000602082840312156112c7576112c6610ea7565b5b60006112d58482850161129c565b91505092915050565b6112e781611147565b81146112f257600080fd5b50565b600081359050611304816112de565b92915050565b6000602082840312156113205761131f610ea7565b5b600061132e848285016112f5565b91505092915050565b6113408161127b565b82525050565b600060208201905061135b6000830184611337565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113998383611118565b60208301905092915050565b6000602082019050919050565b60006113bd82611361565b6113c7818561136c565b93506113d28361137d565b8060005b838110156114035781516113ea888261138d565b97506113f5836113a5565b9250506001810190506113d6565b5085935050505092915050565b6000602082019050818103600083015261142a81846113b2565b905092915050565b60006020828403121561144857611447610ea7565b5b600061145684828501610f0e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114a657607f821691505b6020821081036114b9576114b861145f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826114e4565b61152b86836114e4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061156861156361155e8461127b565b611543565b61127b565b9050919050565b6000819050919050565b6115828361154d565b61159661158e8261156f565b8484546114f1565b825550505050565b600090565b6115ab61159e565b6115b6818484611579565b505050565b5b818110156115da576115cf6000826115a3565b6001810190506115bc565b5050565b601f82111561161f576115f0816114bf565b6115f9846114d4565b81016020851015611608578190505b61161c611614856114d4565b8301826115bb565b50505b505050565b600082821c905092915050565b600061164260001984600802611624565b1980831691505092915050565b600061165b8383611631565b9150826002028217905092915050565b61167482611177565b67ffffffffffffffff81111561168d5761168c610f3e565b5b611697825461148e565b6116a28282856115de565b600060209050601f8311600181146116d557600084156116c3578287015190505b6116cd858261164f565b865550611735565b601f1984166116e3866114bf565b60005b8281101561170b578489015182556001820191506020850194506020810190506116e6565b868310156117285784890151611724601f891682611631565b8355505b6001600288020188555050505b505050505050565b61174681610ee7565b82525050565b600082825260208201905092915050565b600061176882611177565b611772818561174c565b9350611782818560208601611193565b61178b81610f2d565b840191505092915050565b60006040820190506117ab600083018561173d565b81810360208301526117bd818461175d565b90509392505050565b6117cf81611147565b82525050565b60006020820190506117ea60008301846117c6565b92915050565b600060408201905061180560008301856117c6565b61181260208301846117c6565b939250505056fea2646970667358221220d9493708edba8d5a7758b832e66621fb58d2771476eec58d3375b1004e50c14564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80637f94cbbe116100595780637f94cbbe14610124578063ced72f871461014d578063d7eaaccc14610178578063e6a500be146101b5578063f2fde38b146101f257610086565b80630b4ea5271461008b57806324600fc3146100a75780635e3c461a146100be57806369fe0e2d146100fb575b600080fd5b6100a560048036038101906100a09190611069565b61021b565b005b3480156100b357600080fd5b506100bc6105d8565b005b3480156100ca57600080fd5b506100e560048036038101906100e091906110d8565b6106ca565b6040516100f29190611259565b60405180910390f35b34801561010757600080fd5b50610122600480360381019061011d91906112b1565b6108a0565b005b34801561013057600080fd5b5061014b6004803603810190610146919061130a565b610968565b005b34801561015957600080fd5b50610162610acd565b60405161016f9190611346565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a919061130a565b610ad7565b6040516101ac9190611410565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d79190611432565b610bf1565b6040516101e99190611410565b60405180910390f35b3480156101fe57600080fd5b506102196004803603810190610214919061130a565b610cc4565b005b600960009054906101000a900460ff1615610262576040517f3bb4928c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600960006101000a81548160ff0219169083151502179055506008543410156102b9576040517f6bf2f73600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008363ffffffff1663ffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff161561032e576040517f2095a55300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018381525090506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008563ffffffff1663ffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550806000808563ffffffff1663ffffffff16815260200190815260200160002060008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020190816104cd919061166b565b50905050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190915055600360008463ffffffff1663ffffffff1681526020019081526020016000208490806001815401808255809150506001900390600052602060002001600090919091909150556000600960006101000a81548160ff021916908315150217905550837fcb19ace03a64d193c1021f327f4f61ae782ebcbd993505af55db895d74efc6c484846040516105ca929190611796565b60405180910390a250505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106c7573d6000803e3d6000fd5b50565b6106d2610e56565b600460008363ffffffff1663ffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16610746576040517f46f0620200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808363ffffffff1663ffffffff1681526020019081526020016000206000848152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820180546108169061148e565b80601f01602080910402602001604051908101604052809291908181526020018280546108429061148e565b801561088f5780601f106108645761010080835404028352916020019161088f565b820191906000526020600020905b81548152906001019060200180831161087257829003601f168201915b505050505081525050905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610927576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806008819055507f7214ada276dda68e2460c8f5b3a610e54171aeab13399f9fb3653226d30c327e8160405161095d9190611346565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ef576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f059b4b542fc788264839fa7e2bc6c9c62b3b799f5bbbda27432d114599e2c21a81604051610ac291906117d5565b60405180910390a150565b6000600854905090565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b5c576040517f101f2aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610be557602002820191906000526020600020905b815481526020019060010190808311610bd1575b50505050509050919050565b60606000600360008463ffffffff1663ffffffff1681526020019081526020016000208054905003610c4f576040517f641b777000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008363ffffffff1663ffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cb857602002820191906000526020600020905b815481526020019060010190808311610ca4575b50505050509050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4b576040517fe25640ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610db1576040517f3c2896a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08183604051610e4a9291906117f0565b60405180910390a15050565b604051806080016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ec481610eb1565b8114610ecf57600080fd5b50565b600081359050610ee181610ebb565b92915050565b600063ffffffff82169050919050565b610f0081610ee7565b8114610f0b57600080fd5b50565b600081359050610f1d81610ef7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7682610f2d565b810181811067ffffffffffffffff82111715610f9557610f94610f3e565b5b80604052505050565b6000610fa8610e9d565b9050610fb48282610f6d565b919050565b600067ffffffffffffffff821115610fd457610fd3610f3e565b5b610fdd82610f2d565b9050602081019050919050565b82818337600083830152505050565b600061100c61100784610fb9565b610f9e565b90508281526020810184848401111561102857611027610f28565b5b611033848285610fea565b509392505050565b600082601f8301126110505761104f610f23565b5b8135611060848260208601610ff9565b91505092915050565b60008060006060848603121561108257611081610ea7565b5b600061109086828701610ed2565b93505060206110a186828701610f0e565b925050604084013567ffffffffffffffff8111156110c2576110c1610eac565b5b6110ce8682870161103b565b9150509250925092565b600080604083850312156110ef576110ee610ea7565b5b60006110fd85828601610ed2565b925050602061110e85828601610f0e565b9150509250929050565b61112181610eb1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061115282611127565b9050919050565b61116281611147565b82525050565b61117181610ee7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111b1578082015181840152602081019050611196565b60008484015250505050565b60006111c882611177565b6111d28185611182565b93506111e2818560208601611193565b6111eb81610f2d565b840191505092915050565b600060808301600083015161120e6000860182611118565b5060208301516112216020860182611159565b5060408301516112346040860182611168565b506060830151848203606086015261124c82826111bd565b9150508091505092915050565b6000602082019050818103600083015261127381846111f6565b905092915050565b6000819050919050565b61128e8161127b565b811461129957600080fd5b50565b6000813590506112ab81611285565b92915050565b6000602082840312156112c7576112c6610ea7565b5b60006112d58482850161129c565b91505092915050565b6112e781611147565b81146112f257600080fd5b50565b600081359050611304816112de565b92915050565b6000602082840312156113205761131f610ea7565b5b600061132e848285016112f5565b91505092915050565b6113408161127b565b82525050565b600060208201905061135b6000830184611337565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113998383611118565b60208301905092915050565b6000602082019050919050565b60006113bd82611361565b6113c7818561136c565b93506113d28361137d565b8060005b838110156114035781516113ea888261138d565b97506113f5836113a5565b9250506001810190506113d6565b5085935050505092915050565b6000602082019050818103600083015261142a81846113b2565b905092915050565b60006020828403121561144857611447610ea7565b5b600061145684828501610f0e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114a657607f821691505b6020821081036114b9576114b861145f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826114e4565b61152b86836114e4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061156861156361155e8461127b565b611543565b61127b565b9050919050565b6000819050919050565b6115828361154d565b61159661158e8261156f565b8484546114f1565b825550505050565b600090565b6115ab61159e565b6115b6818484611579565b505050565b5b818110156115da576115cf6000826115a3565b6001810190506115bc565b5050565b601f82111561161f576115f0816114bf565b6115f9846114d4565b81016020851015611608578190505b61161c611614856114d4565b8301826115bb565b50505b505050565b600082821c905092915050565b600061164260001984600802611624565b1980831691505092915050565b600061165b8383611631565b9150826002028217905092915050565b61167482611177565b67ffffffffffffffff81111561168d5761168c610f3e565b5b611697825461148e565b6116a28282856115de565b600060209050601f8311600181146116d557600084156116c3578287015190505b6116cd858261164f565b865550611735565b601f1984166116e3866114bf565b60005b8281101561170b578489015182556001820191506020850194506020810190506116e6565b868310156117285784890151611724601f891682611631565b8355505b6001600288020188555050505b505050505050565b61174681610ee7565b82525050565b600082825260208201905092915050565b600061176882611177565b611772818561174c565b9350611782818560208601611193565b61178b81610f2d565b840191505092915050565b60006040820190506117ab600083018561173d565b81810360208301526117bd818461175d565b90509392505050565b6117cf81611147565b82525050565b60006020820190506117ea60008301846117c6565b92915050565b600060408201905061180560008301856117c6565b61181260208301846117c6565b939250505056fea2646970667358221220d9493708edba8d5a7758b832e66621fb58d2771476eec58d3375b1004e50c14564736f6c63430008110033",
  "devdoc": {
    "author": "ekiio",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Sets the contract owner's address. Also sets the address to the      CaseManager contract which is required to check if the user who      wants to upload files is authorized by the CaseManager contract      to do so, i.e. that they have the \"Party\" NFT to the _caseId."
      },
      "getDocument(bytes32,uint32)": {
        "details": "Queries the internal file cabinet for the requested document and      returns the Document struct with the stored metadata. Throws an      error if the hash could not be found in internal records."
      },
      "getDocumentsByCaseId(uint32)": {
        "details": "Returns an array of all document hashes that have been submitted      for a specific case. This will make presenting all the evidence      to the jury possible."
      },
      "getDocumentsByUser(address)": {
        "details": "Returns all the hashes a user has ever uploaded to the evidence      management system. This makes it easier to show users of the      dispute resolution platform all their submitted documents, e.g.      on their dashboard."
      },
      "getFee()": {
        "details": "Gets the current fee payable for using storeDocumentHash()."
      },
      "setCaseManagerAddress(address)": {
        "details": "Sets a new CaseManagerAddress to make the contract upgradeable."
      },
      "setFee(uint256)": {
        "details": "Sets a new fee to be paid for using the storeDocumentHash function"
      },
      "storeDocumentHash(bytes32,uint32,string)": {
        "details": "Stores a file's hash in the internal file cabinet if it has not      already been stored. Emits an event that a new Document has been      registered. Throws an error if the document is already registered.      Can only be accessed by the parties of the case, so the function      first checks for ownership of the corresponding NFT.      Has a simple reentrancy guard that checks if the function has      already been called and will revert if it is so. The function has      to do quite a few sanity checks before any operations are done, so      having a reentrancy guard in place will prevent double storage.",
        "params": {
          "_ipfsHash": "Currently of type string but this is very expensive. A        better approach for future versions would be to store a bytes32        type. This would require slicing off the first two bytes of the        IPFS hash which represent the hash version function, and store        the remainder in a bytes32 variable.        See; https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32/17112#17112"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of contract to new address. Renouncing      ownership is not allowed and will revert."
      },
      "withdrawFunds()": {
        "details": "Allows the contract owner to withdraw the contract's entire balance"
      }
    },
    "title": "Document Notary - Proof Of Existence",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A simple contract that stores a file's hash alongside the sender's         address, the corresponding case ID and a timestamp in a Document         struct. Will proove existence of an untampered file at a specific         point in time, which is particularly useful for an evidence         management system. A jury will be able to get a collection of facts         to a specific case on which they can e.g. vote if the evidence put         forth is truthful and will be admitted, e.g. in a court hearing or         in an arbitration.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3543,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "cabinet",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Document)3536_storage))"
      },
      {
        "astId": 3548,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "userDocs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3552,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "userHasDocs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3557,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "caseDocs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3563,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "caseHasDocs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 3565,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "s_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3567,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "s_caseManagerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3570,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "s_caseManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC1155)1335"
      },
      {
        "astId": 3573,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "s_fee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3575,
        "contract": "contracts/DocumentNotary.sol:DocumentNotary",
        "label": "busy",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC1155)1335": {
        "encoding": "inplace",
        "label": "contract ERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Document)3536_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DocumentNotary.Document)",
        "numberOfBytes": "32",
        "value": "t_struct(Document)3536_storage"
      },
      "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Document)3536_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => struct DocumentNotary.Document))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Document)3536_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Document)3536_storage": {
        "encoding": "inplace",
        "label": "struct DocumentNotary.Document",
        "members": [
          {
            "astId": 3529,
            "contract": "contracts/DocumentNotary.sol:DocumentNotary",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3531,
            "contract": "contracts/DocumentNotary.sol:DocumentNotary",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3533,
            "contract": "contracts/DocumentNotary.sol:DocumentNotary",
            "label": "caseId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3535,
            "contract": "contracts/DocumentNotary.sol:DocumentNotary",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}