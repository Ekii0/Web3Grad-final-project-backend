{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/DocumentNotary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nerror DocumentNotary__DocumentAlreadyExists();\nerror DocumentNotary__DocumentDoesNotExist();\nerror DocumentNotary__UserHasNoDocuments();\nerror DocumentNotary__CaseHasNoDocuments();\nerror DocumentNotary__DoesNotCoverFees();\nerror DocumentNotary__NotAuthorized();\nerror DocumentNotary__RenouncingOwnershipNotAllowed();\nerror DocumentNotary__Busy();\n\n/// @title  Document Notary - Proof Of Existence\n/// @author ekiio\n/// @notice A simple contract that stores a file's hash alongside the sender's\n///         address, the corresponding case ID and a timestamp in a Document\n///         struct. Will proove existence of an untampered file at a specific\n///         point in time, which is particularly useful for an evidence\n///         management system. A jury will be able to get a collection of facts\n///         to a specific case on which they can e.g. vote if the evidence put\n///         forth is truthful and will be admitted, e.g. in a court hearing or\n///         in an arbitration.\ncontract DocumentNotary {\n    struct Document {\n        bytes32 hash;\n        address owner;\n        uint32 caseId;\n        string ipfsHash;\n    }\n\n    mapping(uint32 => mapping(bytes32 => Document)) private cabinet;\n    mapping(address => bytes32[]) private userDocs;\n    mapping(address => bool) private userHasDocs;\n    // Note: Some gas can be saved by not using a boolean but a numerical system,\n    //       e.g. using 0 for 'false' and 1 for 'true'. I am still using boolean\n    //       types here to make the code easier to read. Deploying to a low-cost\n    //       L2 network like Polygon, Optimism or Arbitrum, this shouldn't make\n    //       too much of a difference.\n    mapping(uint32 => bytes32[]) private caseDocs;\n    mapping(uint32 => mapping(bytes32 => bool)) private caseHasDocs;\n\n    address private s_owner;\n    address private s_caseManagerAddress;\n    IERC1155 internal s_caseManager;\n    uint256 private s_fee = 0.5 ether; // Set fee to 0.5 MATIC (~ 0.45 USD atm)\n    bool private busy;\n\n    event NewDocumentFiled(\n        bytes32 indexed _hash,\n        uint32 _caseId,\n        string _ipfsHash\n    );\n    event NewCaseManagerAddressSet(address _newCaseManagerAddress);\n    event OwnershipTransferred(address _oldOwner, address _newOwner);\n    event NewFeeSet(uint256 _newFee);\n\n    modifier onlyOwner() {\n        if (msg.sender != s_owner) {\n            revert DocumentNotary__NotAuthorized();\n        }\n        _;\n    }\n\n    /// @dev Sets the contract owner's address. Also sets the address to the\n    ///      CaseManager contract which is required to check if the user who\n    ///      wants to upload files is authorized by the CaseManager contract\n    ///      to do so, i.e. that they have the \"Party\" NFT to the _caseId.\n    constructor(address _caseManagerAddress) {\n        s_owner = msg.sender;\n        s_caseManagerAddress = _caseManagerAddress;\n        s_caseManager = IERC1155(s_caseManagerAddress);\n    }\n\n    /// @dev Stores a file's hash in the internal file cabinet if it has not\n    ///      already been stored. Emits an event that a new Document has been\n    ///      registered. Throws an error if the document is already registered.\n    ///      Can only be accessed by the parties of the case, so the function\n    ///      first checks for ownership of the corresponding NFT.\n    ///      Has a simple reentrancy guard that checks if the function has\n    ///      already been called and will revert if it is so. The function has\n    ///      to do quite a few sanity checks before any operations are done, so\n    ///      having a reentrancy guard in place will prevent double storage.\n    /// @param _ipfsHash Currently of type string but this is very expensive. A\n    ///        better approach for future versions would be to store a bytes32\n    ///        type. This would require slicing off the first two bytes of the\n    ///        IPFS hash which represent the hash version function, and store\n    ///        the remainder in a bytes32 variable.\n    ///        See; https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32/17112#17112\n    function storeDocumentHash(\n        bytes32 _hash,\n        uint32 _caseId,\n        string memory _ipfsHash\n    ) external payable {\n        if (busy) {\n            revert DocumentNotary__Busy();\n        }\n        busy = true;\n        if (s_caseManager.balanceOf(msg.sender, (_caseId * 10 + 1)) < 1) {\n            revert DocumentNotary__NotAuthorized();\n        }\n        if (msg.value < s_fee) {\n            revert DocumentNotary__DoesNotCoverFees();\n        }\n        if (caseHasDocs[_caseId][_hash]) {\n            revert DocumentNotary__DocumentAlreadyExists();\n        }\n        Document memory newDoc = Document(\n            _hash,\n            msg.sender,\n            _caseId,\n            _ipfsHash\n            //uint64(block.timestamp)\n        );\n\n        userHasDocs[msg.sender] = true;\n        caseHasDocs[_caseId][_hash] = true;\n        cabinet[_caseId][_hash] = newDoc;\n        userDocs[msg.sender].push(_hash);\n        caseDocs[_caseId].push(_hash);\n        busy = false;\n        emit NewDocumentFiled(_hash, _caseId, _ipfsHash);\n    }\n\n    /// @dev Queries the internal file cabinet for the requested document and\n    ///      returns the Document struct with the stored metadata. Throws an\n    ///      error if the hash could not be found in internal records.\n    function getDocument(\n        bytes32 _hash,\n        uint32 _caseId\n    ) public view returns (Document memory) {\n        if (!caseHasDocs[_caseId][_hash]) {\n            revert DocumentNotary__DocumentDoesNotExist();\n        }\n        return cabinet[_caseId][_hash];\n    }\n\n    /// @dev Returns all the hashes a user has ever uploaded to the evidence\n    ///      management system. This makes it easier to show users of the\n    ///      dispute resolution platform all their submitted documents, e.g.\n    ///      on their dashboard.\n    function getDocumentsByUser(\n        address _userAddress\n    ) public view returns (bytes32[] memory) {\n        if (!userHasDocs[_userAddress]) {\n            revert DocumentNotary__UserHasNoDocuments();\n        }\n        return userDocs[_userAddress];\n    }\n\n    /// @dev Returns an array of all document hashes that have been submitted\n    ///      for a specific case. This will make presenting all the evidence\n    ///      to the jury possible.\n    function getDocumentsByCaseId(\n        uint32 _caseId\n    ) public view returns (bytes32[] memory) {\n        if (caseDocs[_caseId].length == 0) {\n            revert DocumentNotary__CaseHasNoDocuments();\n        }\n        return caseDocs[_caseId];\n    }\n\n    /// @dev Sets a new CaseManagerAddress to make the contract upgradeable.\n    function setCaseManagerAddress(\n        address _newCaseManagerAddress\n    ) external onlyOwner {\n        s_caseManagerAddress = _newCaseManagerAddress;\n        emit NewCaseManagerAddressSet(_newCaseManagerAddress);\n    }\n\n    /// @dev Transfers ownership of contract to new address. Renouncing\n    ///      ownership is not allowed and will revert.\n    function transferOwnership(address _newOwner) external onlyOwner {\n        if (_newOwner == address(0)) {\n            revert DocumentNotary__RenouncingOwnershipNotAllowed();\n        }\n        address _oldOwner = s_owner;\n        s_owner = _newOwner;\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /// @dev Sets a new fee to be paid for using the storeDocumentHash function\n    function setFee(uint256 _newFee) external onlyOwner {\n        s_fee = _newFee;\n        emit NewFeeSet(_newFee);\n    }\n\n    /// @dev Allows the contract owner to withdraw the contract's entire balance\n    function withdrawFunds() external onlyOwner {\n        payable(s_owner).transfer(address(this).balance);\n    }\n\n    /// @dev Gets the current fee payable for using storeDocumentHash().\n    function getFee() public view returns (uint256) {\n        return s_fee;\n    }\n\n    /* ToDo: - Make storeDocumentHash only be callable by the dispute parties,\n               and only within a specified timeframe, otherwise everyone could\n               call the function and store documents at any time, even before a\n               case has been opened for dispute settlement.\n               That is, check if msg.sender has the access NFT.\n     */\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}